"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[738],{10535:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"openapi/schemas/createauthorizationrequest","title":"CreateAuthorizationRequest","description":"","source":"@site/docs/openapi/schemas/createauthorizationrequest.schema.mdx","sourceDirName":"openapi/schemas","slug":"/openapi/schemas/createauthorizationrequest","permalink":"/universal-oid4vp/docs/openapi/schemas/createauthorizationrequest","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"createauthorizationrequest","title":"CreateAuthorizationRequest","description":"","sidebar_label":"CreateAuthorizationRequest","hide_title":true,"hide_table_of_contents":true,"schema":true,"sample":{"correlation_id":"my-business-key-or-uuid","query_id":"example-dcql-id","request_uri_method":"get","client_id":"redirect_uri%3Ahttps%3A%2F%2Fexample.com%2Fcb","reponsse_type":"vp_token","response_mode":"direct_post","transaction_data":["string"],"qr_code":{"size":400,"color_dark":"#000000","color_light":"#ffffff"},"direct_post_response_redirect_uri":"https://example.com/callback/success/my-unique-vallue-here","callback":{"status":["authorization_request_created"],"url":"https://example.com/callback/status"}},"custom_edit_url":null},"sidebar":"docs","previous":{"title":"Get authorization session status","permalink":"/universal-oid4vp/docs/openapi/get-authorization-status"},"next":{"title":"AuthorizationStatusRequest","permalink":"/universal-oid4vp/docs/openapi/schemas/authorizationstatusrequest"}}');var i=o(74848),s=o(28453),a=o(95730),n=o.n(a),c=o(9303);const l={id:"createauthorizationrequest",title:"CreateAuthorizationRequest",description:"",sidebar_label:"CreateAuthorizationRequest",hide_title:!0,hide_table_of_contents:!0,schema:!0,sample:{correlation_id:"my-business-key-or-uuid",query_id:"example-dcql-id",request_uri_method:"get",client_id:"redirect_uri%3Ahttps%3A%2F%2Fexample.com%2Fcb",reponsse_type:"vp_token",response_mode:"direct_post",transaction_data:["string"],qr_code:{size:400,color_dark:"#000000",color_light:"#ffffff"},direct_post_response_redirect_uri:"https://example.com/callback/success/my-unique-vallue-here",callback:{status:["authorization_request_created"],url:"https://example.com/callback/status"}},custom_edit_url:null},d=void 0,p={},u=[];function h(e){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(c.default,{as:"h1",className:"openapi__heading",children:"CreateAuthorizationRequest"}),"\n",(0,i.jsx)(n(),{schema:{type:"object",required:["query_id","client_id"],properties:{correlation_id:{type:"string",description:"Optional Id typically containing a business key that can be used to later query the status. If not provided a random UUID will be assigned to the correlationId and will be returned in the response.",example:"my-business-key-or-uuid"},query_id:{type:"string",description:"Identifier for the query (DCQL or PE)",example:"example-dcql-id"},request_uri_method:{type:"string",enum:["get","post"],title:"RequestUriMethod"},client_id:{type:"string",description:"The client id and schema as defined in RFC6749 (client_id) and OID4VP (scheme)",example:"redirect_uri%3Ahttps%3A%2F%2Fexample.com%2Fcb"},reponsse_type:{type:"string",enum:["vp_token"],default:"vp_token",title:"ResponseType"},response_mode:{type:"string",enum:["direct_post","direct_post.jwt"],default:"direct_post",title:"ResponseMode"},transaction_data:{type:"array",items:{type:"string"},description:"Array of strings, where each string is a base64url encoded JSON object that contains a typed parameter set with details about the transaction that the Verifier is requesting the End-User to authorize."},qr_code:{type:"object",description:'As soon as you include this object the OID4VP agent has to generate a QR code. Every RP implementation needs to support this, as we want to make it easy on the integration side. The integration side can choose whether they create their own QR codes, or whether they want to use the QR code from the RP. Thus every RP conforming to this spec should support generating a QR code in data-uri format. No property is mandatory, so a "qrCodeOpts": {} is already valid and generates a QR with the default properties applied. A RP implementation is free to implement additional properties like logo\'s etc. This API only mandates a few common properties to not make it too complex for RPs. If the integrating app wants to use their own QR codes they simply need to omit the qr_code param from the request. The agent should not generate a QT code in this case\n',properties:{size:{type:"number",description:"Size of the QR code in pixels.",default:400},color_dark:{type:"string",description:"Color of the blocks on the QR code. Accepts a CSS <color>. For more information about CSS <color>, please refer to [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).",default:"#000000"},color_light:{type:"string",description:"Color of the empty areas on the QR code. Accepts a CSS <color>. For more information about CSS <color>, please refer to [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).",default:"#ffffff"}},title:"QRCodeOpts"},direct_post_response_redirect_uri:{type:"string",description:"Optional URI where the user agent on the wallet device should redirect when completing the interaction succesfully",example:"https://example.com/callback/success/my-unique-vallue-here"},callback:{type:"object",properties:{status:{type:"array",items:{type:"string",enum:["authorization_request_created","authorization_request_retrieved","authorization_response_received","authorization_response_verified","error"],title:"AuthorizationStatus"},description:"Limit the callbacks to certain statuses. If not provided or an empty array is provided, all statuses will be assumed"},url:{type:"string",description:"The callback url for status updates",example:"https://example.com/callback/status"}},required:["url"],title:"CallbackOpts"}},title:"CreateAuthorizationRequest"},schemaType:"response"})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h()}}}]);